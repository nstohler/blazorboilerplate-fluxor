@page "/todo_list"
@*@attribute [Authorize] Uncomment to Secure this page*@

@*@inject HttpClient Http
    @inject IMatToaster matToaster*@

@inherits TodoListBase

<h1>Todo List - CRUD</h1>
<p>
    This Todo List demonstrates fetching data from the server and CRUD for Blazor with .NET Core API server. This example unlike most is implemented with persistent data using N-Tier design patterns.
    Check out the <a href="https://github.com/enkodellc/blazorboilerplate" target="_blank">repository to view the source.</a> If you find this helpful please contribute or <a href="https://www.paypal.me/enkodellc">donate</a> to support further development.
    Delete is Protected to Admin users only.
</p>
<div>
    <MatButton OnClick="@LoadTodos">Refresh</MatButton>
</div>

@if (FetchToDoItemsState.Value.ErrorMessage != null)
{
    <h1>Counter Error</h1>
    <p>@FetchToDoItemsState.Value.ErrorMessage</p>
}
@if (FetchToDoItemsState.Value.IsLoading)
{
    <em>Loading...</em>
}
@if (FetchToDoItemsState.Value.ToDoItems != null)
{
    <MatTable Class="mat-elevation-z5" Items="@FetchToDoItemsState.Value.ToDoItems" LoadInitialData="true" Striped="true" FilterByColumnName="Title" DebounceMilliseconds="150" PageSize="10">
        <MatTableHeader>
            <th>
                <div style="width: 135px;">
                    <MatButton Icon="playlist_add" Label="New Todo" OnClick="@((e) => OpenDialog())" Raised="true"></MatButton>
                </div>
            </th>
            <th>Id</th>
            <th>Completed</th>
            <th style="min-width: 180px;">Todo</th>
        </MatTableHeader>
        <MatTableRow Context="TodoRow">
            <td>
                <MatIconButton Icon="delete" OnClick="@(() => OpenDeleteDialog(TodoRow.Id))"></MatIconButton>
            </td>
            <td>@String.Format("{0:d}", TodoRow.Id)</td>
            <td><MatCheckbox Checked="@TodoRow.IsCompleted" class="filled-in chk-col-blue" CheckedChanged="@((e) => Update(TodoRow))"></MatCheckbox></td>
            <td>@TodoRow.Title</td>
        </MatTableRow>
    </MatTable>
}

<MatDialog @bind-IsOpen="@dialogIsOpen">
    <MatDialogTitle>Create Todo</MatDialogTitle>
    <MatDialogContent>
        <EditForm Model="@createTodo" OnValidSubmit="@CreateTodo">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <fieldset>
                <div class="form-group">
                    <MatTextField @bind-Value="@createTodo.Title" Label="Title" Icon="title" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                </div>
                <div class="form-group">
                    <MatCheckbox @bind-Checked="@createTodo.IsCompleted" Label="Completed"></MatCheckbox>
                </div>
            </fieldset>
        </EditForm>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { dialogIsOpen = false; })">Cancel</MatButton>
        <MatButton OnClick="@CreateTodo">Create Todo</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@deleteDialogOpen" Style="z-index:100">
    <MatDialogTitle><MatIcon Icon="warning"></MatIcon> Confirm Delete</MatDialogTitle>
    <MatDialogContent>
        Are you sure you want to delete todo "@deleteTodo?.Title" ?
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { deleteDialogOpen = false; })">Cancel</MatButton>
        <MatButton OnClick="@Delete">Delete</MatButton>
    </MatDialogActions>
</MatDialog>

