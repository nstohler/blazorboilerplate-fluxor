@page "/charts"
@page "/charts/{chartId:int}"
@page "/charts/{chartId:int}/{action}"
@*@attribute [Authorize] Uncomment to Secure this page*@
@inject HttpClient Http
@inject IMatToaster matToaster
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<h1>Charts</h1>

<button type="button" class="btn btn-primary" @onclick="TestRouter1">Test Router 1</button>
<button type="button" class="btn btn-primary" @onclick="CreateAmChart">Trigger JavaScript Prompt</button>

<div>
    <ul>
        <li>chartId: @ChartId</li>
        <li>action: @Action</li>
    </ul>
</div>

<SubNavTest ChartId="@ChartId" Action="@Action"></SubNavTest>

<button type="button" class="btn btn-primary" @onclick="SetChartData">Set Chart Data</button> <br />
<button type="button" class="btn btn-primary" @onclick="DumpParameters">Dump Parameters</button>

<div id="chartdiv" style="width: 900px; height: 800px;"></div>

@code {

    [Parameter]
    public int ChartId { get; set; }

    [Parameter]
    public string Action { get; set; }

    protected override Task OnParametersSetAsync()
    {
        Console.WriteLine($"OnParametersSetAsync chartId: {ChartId} / {Action}");
        return base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("first render");
            await CreateAmChart();
        }

        await base.OnAfterRenderAsync(firstRender);

    }

    public async Task CreateAmChart()
    {

        //await JSRuntime.InvokeVoidAsync("amChartsJsFunctions.createAmChartSample");
        await JSRuntime.InvokeVoidAsync("amChartsJsFunctions.createAmChartXySample");
    }

    public async Task SetChartData()
    {
        var countries = new List<string>
        {
            "Switzerland", "Austria", "Germany", "Finland", "Sweden", "Canada"
        };

        var param = new List<ChartData>();
        var rnd = new Random();

        foreach (var country in countries)
        {
            var chartData = new ChartData
            {
                Country = country,
                Litres = rnd.NextDouble() * 100.0,
                Units = rnd.NextDouble() * rnd.Next(50, 200),
            };
            param.Add(chartData);
        }

        await JSRuntime.InvokeVoidAsync("amChartsJsFunctions.setChartData", param);
    }

    public async Task DumpParameters()
    {
        // var param = "this is a test";

        var param = new List<ChartData>()
        {
            new ChartData()
            {
                Country = "Switzerland",
                Litres = 111.123,
                Units = 1.75
            },
            new ChartData()
            {
                Country = "Austria",
                Litres = 203.13,
                Units = 3.421
            },
        };

        await JSRuntime.InvokeVoidAsync("amChartsJsFunctions.dumpParameters", param);
    }

    public async Task TestRouter1()
    {
        var id = new Random().Next(100);
        NavigationManager.NavigateTo($"charts/{id}/{Action}");
    }

    // todo: add subcomponent, change url (with navigateto) there in on parameters change... or on button click

    internal class ChartData
    {
        public string Country { get; set; }
        public double Litres { get; set; }
        public double Units { get; set; }
    }
}