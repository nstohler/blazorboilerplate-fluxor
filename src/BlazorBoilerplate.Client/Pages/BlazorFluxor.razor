@page "/blazor-fluxor"

@using BlazorBoilerplate.Client.Store.BlazorFluxor
@using BlazorBoilerplate.Client.Store.BlazorFluxor.DetailById
@using BlazorBoilerplate.Client.Store.BlazorFluxor.EditById
@using BlazorBoilerplate.Client.Store.UpsertToDoItem
@using BlazorBoilerplate.Client.Store.UpsertToDoItem.Delete
@inherits BlazorFluxorBase

<h1>Blazor.Fluxor Redux</h1>

<h2>Counter</h2>

<MatFAB icon="exposure_plus_1" @onclick="@IncrementCount"></MatFAB>

@if (CounterState.Value.ErrorMessage != null)
{
    <h1>Counter Error</h1>
    <p>@CounterState.Value.ErrorMessage</p>
}

@if (FetchToDoItemsState.Value.ErrorMessage != null)
{
    <h1>FetchToDoItemsState Error</h1>
    <p>@FetchToDoItemsState.Value.ErrorMessage</p>
}

<p>
    Current Page Count:
    @if (CounterState.Value.IsLoading)
    {
        <em>Loading...</em>
    }
    else if (CounterState.Value.IsLoaded)
    {
        <strong>@CounterState.Value.CurrentCount</strong>
    }    
</p>

<MatFAB icon="exposure_plus_1" @onclick="@LoadToDos"></MatFAB>

<div>
    ToDoItems: <br />
    @if (FetchToDoItemsState.Value.IsLoading)
    {
        <em>Loading ToDos...</em>
    }
    @if (FetchToDoItemsState.Value.ToDoItems != null)
    {
        <ul>
            @foreach (var toDo in FetchToDoItemsState.Value.ToDoItems)
            {
                <li>
                    <span @onclick="@(() => Dispatcher.Dispatch(new DetailByIdToDoItemAction(toDo.Id)))">details</span> |
                    <span @onclick="@(() => Dispatcher.Dispatch(new EditByIdToDoItemAction(toDo.Id)))">edit</span> :
                    @toDo.Id | @toDo.Title | @toDo.IsCompleted
                </li>
            }
        </ul>

        <div>
            selected-detail: @BlazorFluxorState.Value.DetailToDoId <br />
            selected-edit: @BlazorFluxorState.Value.EditToDoId
        </div>

        <hr />

        @if (BlazorFluxorState.Value.DetailToDoDto != null)
        {
            <div>
                <h5>Detail ToDo:</h5>
                <div>
                    Id: @BlazorFluxorState.Value.DetailToDoDto.Id <br />
                    Title: @BlazorFluxorState.Value.DetailToDoDto.Title <br />
                    Completed: @BlazorFluxorState.Value.DetailToDoDto.IsCompleted
                </div>
            </div>
            <MatButton Icon="playlist_add" Label="Close Details" OnClick="@(() => Dispatcher.Dispatch(new DetailByIdToDoItemAction(null)))" Raised="true"></MatButton>
        }

        <hr />

        @if (BlazorFluxorState.Value.EditToDoDto != null)
        {
            <h5>Edit ToDo:</h5>
            <div>
                Id: @BlazorFluxorState.Value.EditToDoDto.Id <br />
                Title: @BlazorFluxorState.Value.EditToDoDto.Title <br />
                <span @onclick="@(() => BlazorFluxorState.Value.EditToDoDto.IsCompleted = !BlazorFluxorState.Value.EditToDoDto.IsCompleted)">
                    Completed: @BlazorFluxorState.Value.EditToDoDto.IsCompleted
                </span>
            </div>
            <MatButton Icon="playlist_add" Label="Save" OnClick="@((e) => UpdateTodo(BlazorFluxorState.Value.EditToDoDto))" Raised="true"></MatButton> 
            @if (UpsertToDoItemState.Value.IsProcessing)
            {
                <text>working...</text>
            }
            <br />
            <MatButton Icon="playlist_add" Label="Cancel" OnClick="@((e) => CancelSelection())" Raised="true"></MatButton>
            <br />
            <br />
            <MatButton Icon="playlist_add" Label="Delete" OnClick="@((e) => Dispatcher.Dispatch(new DeleteToDoItemAction(BlazorFluxorState.Value.EditToDoDto)))" Raised="true"></MatButton>
        }

        <hr />

        <h5>Add new ToDo item:</h5>
        <EditForm Model="@addTodo" OnValidSubmit="@CreateTodo">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <fieldset>
                <div class="form-group">
                    <MatTextField @bind-Value="@addTodo.Title" Label="Title" Icon="title" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                </div>
                <div class="form-group">
                    <MatCheckbox @bind-Checked="@addTodo.IsCompleted" Label="Completed"></MatCheckbox>
                </div>
            </fieldset>
            <MatButton type="submit" name="action">Create</MatButton>
        </EditForm>
    }
</div>
