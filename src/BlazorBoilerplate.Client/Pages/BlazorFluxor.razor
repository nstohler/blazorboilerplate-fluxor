@page "/blazor-fluxor"

@attribute [Authorize]

@using Blazor.Fluxor
@using BlazorBoilerplate.Client.Store.BlazorFluxor
@using BlazorBoilerplate.Client.Store.Counter
@using BlazorBoilerplate.Client.Store.FetchToDo
@using BlazorBoilerplate.Client.Store.FetchToDo.UpsertToDoItem

@inject AppState appState
@inject IDispatcher Dispatcher
@inject IState<CounterState> CounterState
@inject IState<FetchToDoItemsState> FetchToDoItemsState
@inject IState<BlazorFluxorState> BlazorFluxorState

@inherits Blazor.Fluxor.Components.FluxorComponent

<h1>Blazor.Fluxor Redux</h1>

<h2>Counter</h2>

<MatFAB icon="exposure_plus_1" @onclick="@IncrementCount"></MatFAB>

@if (CounterState.Value.ErrorMessage != null)
{
    <h1>Counter Error</h1>
    <p>@CounterState.Value.ErrorMessage</p>
}

@if (FetchToDoItemsState.Value.ErrorMessage != null)
{
    <h1>FetchToDoItemsState Error</h1>
    <p>@FetchToDoItemsState.Value.ErrorMessage</p>
}

<p>
    Current Page Count:
    @if (CounterState.Value.IsLoading)
    {
        <em>Loading...</em>
    }
    else if (CounterState.Value.IsLoaded)
    {
        <strong>@CounterState.Value.CurrentCount</strong>
    }    
</p>

<MatFAB icon="exposure_plus_1" @onclick="@LoadToDos"></MatFAB>

<p>
    ToDoItems: <br />
    @if (FetchToDoItemsState.Value.IsLoading)
    {
        <em>Loading ToDos...</em>
    }        
    @if (FetchToDoItemsState.Value.ToDoItems != null)
    {
        <ul>
            @foreach (var toDo in FetchToDoItemsState.Value.ToDoItems)
            {
                <li @onclick="@(() => Dispatcher.Dispatch(new SelectToDoItemAction(toDo.Id)))">@toDo.Id | @toDo.Title | @toDo.IsCompleted</li>
            }
        </ul>
        <span>
            selected: @BlazorFluxorState.Value.SelectedToDoId
        </span>
        @if (BlazorFluxorState.Value.EditToDoDto != null)
        {
            <h5>Edit ToDo:</h5>
            <div>
                Id: @BlazorFluxorState.Value.EditToDoDto.Id <br />
                Title: @BlazorFluxorState.Value.EditToDoDto.Title <br />
                <span @onclick="@(() => BlazorFluxorState.Value.EditToDoDto.IsCompleted = !BlazorFluxorState.Value.EditToDoDto.IsCompleted)">
                    Completed: @BlazorFluxorState.Value.EditToDoDto.IsCompleted 
                </span>
            </div>
            <MatButton Icon="playlist_add" Label="Save" OnClick="@((e) => UpdateTodo(BlazorFluxorState.Value.EditToDoDto))" Raised="true"></MatButton> <br/>
            <MatButton Icon="playlist_add" Label="Cancel" OnClick="@((e) => CancelSelection())" Raised="true"></MatButton>

        }
    }
</p>

@code 
{

    protected override void OnInitialized()
    {
        base.OnInitialized();

        //CounterState.Subscribe(this);
        //FetchToDoItemsState.Subscribe(this);

        //FetchToDoItemsState.StateChanged += (sender, state) =>
        //{
        //    Console.WriteLine("ToDoItem state has changed!");
        //};

        if (FetchToDoItemsState.Value.ToDoItems == null)
        {
            Dispatcher.Dispatch(new GetToDoItemsAction());
        }
    }

    public async Task IncrementCount()
    {
        Dispatcher.Dispatch(new IncrementCounterAction(CounterState.Value.CurrentCount));
    }

    public async Task LoadToDos()
    {
        Dispatcher.Dispatch(new GetToDoItemsAction());
    }

    public void UpdateTodo(TodoDto toDoItem)
    {
        Dispatcher.Dispatch(new UpsertToDoItemAction(toDoItem));
    }

    private void CancelSelection()
    {
        Dispatcher.Dispatch(new SelectToDoItemAction(null));
    }

}
